diff --git a/core/misc/cspell/dictionary.txt b/core/misc/cspell/dictionary.txt
index 40ebb8e9d11812bdbe4eeae215d955e0cbaf31f7..bf2a985365995f9730721682574edd4076e3b075 100644
--- a/core/misc/cspell/dictionary.txt
+++ b/core/misc/cspell/dictionary.txt
@@ -224,6 +224,7 @@ chien
 chiens
 childlist
 chocolatiers
+chotchkies
 chromedriver
 chtext
 chumillas
@@ -662,6 +663,7 @@ inator
 indexname
 ingoa
 inited
+initech
 inno
 inputtypes
 insidekeyword
@@ -783,6 +785,7 @@ lrdd
 lstitle
 ltitle
 ltlanguage
+lumbergh
 lundi
 lzop
 maailma
@@ -1676,6 +1679,7 @@ vorige
 vous
 vxezb
 vxfbk
+waddams
 waitfor
 wcprops
 wcsrefsdf
diff --git a/core/modules/layout_builder/config/schema/layout_builder.schema.yml b/core/modules/layout_builder/config/schema/layout_builder.schema.yml
index 7bc4461891b5889f1ce25d63b1ebd91c035bd546..4594a59e56a51051fcfdd00ee63d1492449f3af2 100644
--- a/core/modules/layout_builder/config/schema/layout_builder.schema.yml
+++ b/core/modules/layout_builder/config/schema/layout_builder.schema.yml
@@ -52,6 +52,11 @@ layout_builder.component:
     additional:
       type: ignore
       label: 'Additional data'
+    third_party_settings:
+      type: sequence
+      label: 'Third party settings'
+      sequence:
+        type: '[%parent.%parent.%type].third_party.[%key]'

 inline_block:
   type: block_settings
diff --git a/core/modules/layout_builder/layout_builder.post_update.php b/core/modules/layout_builder/layout_builder.post_update.php
index 04d2139cf7d592d1ff24fdc909f577a589fb64ad..78c9a861ca23f2ec6db1edae4d032dcf3d666622 100644
--- a/core/modules/layout_builder/layout_builder.post_update.php
+++ b/core/modules/layout_builder/layout_builder.post_update.php
@@ -73,3 +73,10 @@ function layout_builder_post_update_section_storage_context_mapping(&$sandbox =
 function layout_builder_post_update_tempstore_route_enhancer() {
   // Empty post-update hook.
 }
+
+/**
+ * Clear caches due to config schema addition.
+ */
+function layout_builder_post_update_component_third_party_settings_schema() {
+  // Empty post-update hook.
+}
diff --git a/core/modules/layout_builder/src/Entity/LayoutBuilderEntityViewDisplay.php b/core/modules/layout_builder/src/Entity/LayoutBuilderEntityViewDisplay.php
index 70e86f69991359deb6c086cc1a12df7a3711037e..4b1669ca39dee780cf9930e323516764838d0b01 100644
--- a/core/modules/layout_builder/src/Entity/LayoutBuilderEntityViewDisplay.php
+++ b/core/modules/layout_builder/src/Entity/LayoutBuilderEntityViewDisplay.php
@@ -437,7 +437,7 @@ public function setComponent($name, array $options = []) {

       $section = $this->getDefaultSection();
       $region = $options['region'] ?? $section->getDefaultRegion();
-      $new_component = (new SectionComponent(\Drupal::service('uuid')->generate(), $region, $configuration));
+      $new_component = SectionComponent::create(\Drupal::service('uuid')->generate(), $region, $configuration);
       $section->appendComponent($new_component);
     }
     return $this;
diff --git a/core/modules/layout_builder/src/Form/AddBlockForm.php b/core/modules/layout_builder/src/Form/AddBlockForm.php
index 63c79c2c46c63ede803afd01688609a2f9eb379b..a982b86a58eb143a076a500323d1df112b277297 100644
--- a/core/modules/layout_builder/src/Form/AddBlockForm.php
+++ b/core/modules/layout_builder/src/Form/AddBlockForm.php
@@ -53,7 +53,7 @@ protected function submitLabel() {
   public function buildForm(array $form, FormStateInterface $form_state, SectionStorageInterface $section_storage = NULL, $delta = NULL, $region = NULL, $plugin_id = NULL) {
     // Only generate a new component once per form submission.
     if (!$component = $form_state->get('layout_builder__component')) {
-      $component = new SectionComponent($this->uuidGenerator->generate(), $region, ['id' => $plugin_id]);
+      $component = SectionComponent::create($this->uuidGenerator->generate(), $region, ['id' => $plugin_id]);
       $section_storage->getSection($delta)->appendComponent($component);
       $form_state->set('layout_builder__component', $component);
     }
diff --git a/core/modules/layout_builder/src/SectionComponent.php b/core/modules/layout_builder/src/SectionComponent.php
index b0f8ff13e4f3a8a6257411af2cffd78cb394d7c9..cd34d92af834f1b555a9ef63639992868f40c58b 100644
--- a/core/modules/layout_builder/src/SectionComponent.php
+++ b/core/modules/layout_builder/src/SectionComponent.php
@@ -3,6 +3,7 @@
 namespace Drupal\layout_builder;

 use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
 use Drupal\Core\Plugin\ContextAwarePluginInterface;
 use Drupal\layout_builder\Event\SectionComponentBuildRenderArrayEvent;

@@ -18,7 +19,7 @@
  * @see \Drupal\layout_builder\Section
  * @see \Drupal\layout_builder\SectionStorageInterface
  */
-class SectionComponent {
+class SectionComponent implements ThirdPartySettingsInterface {

   /**
    * The UUID of the component.
@@ -52,9 +53,24 @@ class SectionComponent {
    * Any additional properties and values.
    *
    * @var mixed[]
+   *
+   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0.
+   *   Additional component properties should be set
+   *   via ::setThirdPartySetting().
+   *
+   * @see https://www.drupal.org/node/3100177
    */
   protected $additional = [];

+  /**
+   * Third party settings.
+   *
+   * An array of key/value pairs keyed by provider.
+   *
+   * @var array[]
+   */
+  protected $thirdPartySettings = [];
+
   /**
    * Constructs a new SectionComponent.
    *
@@ -65,13 +81,53 @@ class SectionComponent {
    * @param mixed[] $configuration
    *   The plugin configuration.
    * @param mixed[] $additional
-   *   An additional values.
+   *   (optional) Additional values.
+   * @param array[] $third_party_settings
+   *   (optional) Any third party settings.
+   * @param bool $instantiated_by_create
+   *   (optional) Whether the object is being instantiated by ::create().
+   *
+   * @todo Change constructor from public to private in
+   *   https://www.drupal.org/project/drupal/issues/3160644 when the
+   *   drupal:10.0.x branch is opened.
+   * @todo Remove $additional and $instantiated_by_create arguments in
+   *   https://www.drupal.org/project/drupal/issues/3160644 when the
+   *   drupal:10.0.x branch is opened.
    */
-  public function __construct($uuid, $region, array $configuration = [], array $additional = []) {
+  public function __construct($uuid, $region, array $configuration = [], array $additional = [], array $third_party_settings = [], $instantiated_by_create = FALSE) {
     $this->uuid = $uuid;
     $this->region = $region;
     $this->configuration = $configuration;
+    // @todo Remove below $additional code when the drupal:10.0.x branch is opened.
+    // @see https://www.drupal.org/project/drupal/issues/3160644
     $this->additional = $additional;
+    if ($additional) {
+      @trigger_error('Setting additional properties is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Additional component properties should be set via ::setThirdPartySetting(). See https://www.drupal.org/node/3100177', E_USER_DEPRECATED);
+    }
+    $this->thirdPartySettings = $third_party_settings;
+    // @todo Remove below conditional when the drupal:10.0.x branch is opened.
+    // @see https://www.drupal.org/project/drupal/issues/3160644
+    if (!$instantiated_by_create) {
+      @trigger_error('Instantiating a SectionComponent object directly is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. SectionComponents should be instantiated using the SectionComponent::create() method instead. See https://www.drupal.org/node/3100177', E_USER_DEPRECATED);
+    }
+  }
+
+  /**
+   * Create a new SectionComponent object.
+   *
+   * @param string $uuid
+   *   The UUID.
+   * @param string $region
+   *   The region.
+   * @param mixed[] $configuration
+   *   The plugin configuration.
+   * @param array[] $third_party_settings
+   *   (optional) Any third party settings.
+   *
+   * @return static
+   */
+  public static function create(string $uuid, string $region, array $configuration = [], array $third_party_settings = []) {
+    return new static($uuid, $region, $configuration, [], $third_party_settings, TRUE);
   }

   /**
@@ -99,6 +155,12 @@ public function toRenderArray(array $contexts = [], $in_preview = FALSE) {
    * @param string $property
    *   The property to retrieve.
    *
+   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0.
+   *   Additional component properties should be gotten
+   *   via ::setThirdPartySetting().
+   *
+   * @see https://www.drupal.org/node/3100177
+   *
    * @return mixed
    *   The value for that property, or NULL if the property does not exist.
    */
@@ -109,6 +171,7 @@ public function get($property) {
     else {
       $value = $this->additional[$property] ?? NULL;
     }
+    @trigger_error('Getting additional properties is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Additional component properties should be gotten via ::setThirdPartySetting(). See https://www.drupal.org/node/3100177', E_USER_DEPRECATED);
     return $value;
   }

@@ -120,6 +183,12 @@ public function get($property) {
    * @param mixed $value
    *   The value to set.
    *
+   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0.
+   *   Additional component properties should be set
+   *   via ::setThirdPartySetting().
+   *
+   * @see https://www.drupal.org/node/3100177
+   *
    * @return $this
    */
   public function set($property, $value) {
@@ -129,6 +198,7 @@ public function set($property, $value) {
     else {
       $this->additional[$property] = $value;
     }
+    @trigger_error('Setting additional properties is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Additional component properties should be set via ::setThirdPartySetting(). See https://www.drupal.org/node/3100177', E_USER_DEPRECATED);
     return $this;
   }

@@ -292,8 +362,11 @@ public function toArray() {
       'uuid' => $this->getUuid(),
       'region' => $this->getRegion(),
       'configuration' => $this->getConfiguration(),
+      // @todo Remove below key/value when the drupal:10.0.x branch is opened.
+      // @see https://www.drupal.org/project/drupal/issues/3160644
       'weight' => $this->getWeight(),
       'additional' => $this->additional,
+      'third_party_settings' => $this->thirdPartySettings,
     ];
   }

@@ -309,12 +382,75 @@ public function toArray() {
    *   The section component object.
    */
   public static function fromArray(array $component) {
+    // Ensure expected array keys are present.
+    $component += [
+      'uuid' => '',
+      'region' => '',
+      'configuration' => [],
+      // @todo Remove below key/value when the drupal:10.0.x branch is opened.
+      // @see https://www.drupal.org/project/drupal/issues/3160644
+      'additional' => [],
+      'third_party_settings' => [],
+    ];
+    // @todo Use create() method when the drupal:10.0.x branch is opened.
+    // @see https://www.drupal.org/project/drupal/issues/3160644
     return (new static(
       $component['uuid'],
       $component['region'],
       $component['configuration'],
-      $component['additional']
+      // @todo Remove below argument when the drupal:10.0.x branch is opened.
+      // @see https://www.drupal.org/project/drupal/issues/3160644
+      $component['additional'],
+      $component['third_party_settings'],
+      // @todo Remove below argument when the drupal:10.0.x branch is opened.
+      // @see https://www.drupal.org/project/drupal/issues/3160644
+      TRUE,
     ))->setWeight($component['weight']);
   }

+  /**
+   * {@inheritdoc}
+   */
+  public function getThirdPartySetting($provider, $key, $default = NULL) {
+    return isset($this->thirdPartySettings[$provider][$key]) ? $this->thirdPartySettings[$provider][$key] : $default;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getThirdPartySettings($provider) {
+    return isset($this->thirdPartySettings[$provider]) ? $this->thirdPartySettings[$provider] : [];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setThirdPartySetting($provider, $key, $value) {
+    $this->thirdPartySettings[$provider][$key] = $value;
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function unsetThirdPartySetting($provider, $key) {
+    unset($this->thirdPartySettings[$provider][$key]);
+    // If the third party is no longer storing any information, completely
+    // remove the array holding the settings for this provider.
+    if (empty($this->thirdPartySettings[$provider])) {
+      unset($this->thirdPartySettings[$provider]);
+    }
+    return $this;
+  }
+
+  /**
+   * Gets the list of third parties that store information.
+   *
+   * @return array
+   *   The list of third parties.
+   */
+  public function getThirdPartyProviders() {
+    return array_keys($this->thirdPartySettings);
+  }
+
 }
diff --git a/core/modules/layout_builder/tests/modules/layout_builder_defaults_test/config/install/core.entity_view_display.entity_test.bundle_with_extra_fields.default.yml b/core/modules/layout_builder/tests/modules/layout_builder_defaults_test/config/install/core.entity_view_display.entity_test.bundle_with_extra_fields.default.yml
index 069aa0341957a62481f7451a2204223fe9ccabef..2474784e12fa2c2432d1aee2629f46933d7c8302 100644
--- a/core/modules/layout_builder/tests/modules/layout_builder_defaults_test/config/install/core.entity_view_display.entity_test.bundle_with_extra_fields.default.yml
+++ b/core/modules/layout_builder/tests/modules/layout_builder_defaults_test/config/install/core.entity_view_display.entity_test.bundle_with_extra_fields.default.yml
@@ -23,6 +23,7 @@ third_party_settings:
                 entity: layout_builder.entity
             weight: 1
             additional: {  }
+            third_party_settings: {  }
 id: entity_test.bundle_with_extra_fields.default
 targetEntityType: entity_test
 bundle: bundle_with_extra_fields
diff --git a/core/modules/layout_builder/tests/modules/layout_builder_defaults_test/config/schema/layout_builder_defaults_test.schema.yml b/core/modules/layout_builder/tests/modules/layout_builder_defaults_test/config/schema/layout_builder_defaults_test.schema.yml
index cd7d1515260321665c6a5e5808555e7784d25934..f270995dd24913df7f52fcd62d24f40fb3b79796 100644
--- a/core/modules/layout_builder/tests/modules/layout_builder_defaults_test/config/schema/layout_builder_defaults_test.schema.yml
+++ b/core/modules/layout_builder/tests/modules/layout_builder_defaults_test/config/schema/layout_builder_defaults_test.schema.yml
@@ -4,3 +4,9 @@ layout_builder.section.third_party.layout_builder_defaults_test:
     which_party:
       label: 'Which party?'
       type: string
+layout_builder.component.third_party.layout_builder_defaults_test:
+  type: mapping
+  mapping:
+    harold:
+      type: string
+      label: Some arbitrary string.
diff --git a/core/modules/layout_builder/tests/modules/layout_builder_element_test/src/EventSubscriber/TestPrepareLayout.php b/core/modules/layout_builder/tests/modules/layout_builder_element_test/src/EventSubscriber/TestPrepareLayout.php
index cec4af43bb061495f9911fbbcbd72bf339a1d1f6..d86ce1d24d0f3b7fb4a3632064a5d29d9308465a 100644
--- a/core/modules/layout_builder/tests/modules/layout_builder_element_test/src/EventSubscriber/TestPrepareLayout.php
+++ b/core/modules/layout_builder/tests/modules/layout_builder_element_test/src/EventSubscriber/TestPrepareLayout.php
@@ -77,7 +77,7 @@ public function onBeforePrepareLayout(PrepareLayoutEvent $event) {
       // Node 1 or 2: Append a block to the layout.
       if (in_array($entity->id(), ['1', '2'])) {
         $section = new Section('layout_onecol');
-        $section->appendComponent(new SectionComponent('fake-uuid', 'content', [
+        $section->appendComponent(SectionComponent::create('fake-uuid', 'content', [
           'id' => 'static_block',
           'label' => 'Test static block title',
           'label_display' => 'visible',
@@ -110,7 +110,7 @@ public function onAfterPrepareLayout(PrepareLayoutEvent $event) {
       // Node 1, 2, or 3: Append a block to the layout.
       if (in_array($entity->id(), ['1', '2', '3'])) {
         $section = new Section('layout_onecol');
-        $section->appendComponent(new SectionComponent('fake-uuid', 'content', [
+        $section->appendComponent(SectionComponent::create('fake-uuid', 'content', [
           'id' => 'static_block_two',
           'label' => 'Test second static block title',
           'label_display' => 'visible',
diff --git a/core/modules/layout_builder/tests/modules/layout_builder_test/src/Plugin/SectionStorage/TestStateBasedSectionStorage.php b/core/modules/layout_builder/tests/modules/layout_builder_test/src/Plugin/SectionStorage/TestStateBasedSectionStorage.php
index d51cdc72c09d88664825a7d853c300d364da3aec..7c00ce6e72d1dd5860989d8e03dcf0a589afe655 100644
--- a/core/modules/layout_builder/tests/modules/layout_builder_test/src/Plugin/SectionStorage/TestStateBasedSectionStorage.php
+++ b/core/modules/layout_builder/tests/modules/layout_builder_test/src/Plugin/SectionStorage/TestStateBasedSectionStorage.php
@@ -24,7 +24,7 @@ class TestStateBasedSectionStorage extends SectionStorageBase {
   public function getSections() {
     // Return a custom section.
     $section = new Section('layout_onecol');
-    $section->appendComponent(new SectionComponent('fake-uuid', 'content', [
+    $section->appendComponent(SectionComponent::create('fake-uuid', 'content', [
       'id' => 'system_powered_by_block',
       'label' => 'Test block title',
       'label_display' => 'visible',
diff --git a/core/modules/layout_builder/tests/src/Functional/LayoutSectionTest.php b/core/modules/layout_builder/tests/src/Functional/LayoutSectionTest.php
index c22938cb8b874f3d784c879b0ec8002ad9fd1eb8..9746a6acaf535506b7d526c12950f46cb34480a8 100644
--- a/core/modules/layout_builder/tests/src/Functional/LayoutSectionTest.php
+++ b/core/modules/layout_builder/tests/src/Functional/LayoutSectionTest.php
@@ -65,7 +65,7 @@ public function providerTestLayoutSectionFormatter() {
       [
         [
           'section' => new Section('layout_onecol', [], [
-            'baz' => new SectionComponent('baz', 'content', [
+            'baz' => SectionComponent::create('baz', 'content', [
               'id' => 'test_context_aware',
               'context_mapping' => [
                 'user' => '@user.current_user_context:current_user',
@@ -89,7 +89,7 @@ public function providerTestLayoutSectionFormatter() {
       [
         [
           'section' => new Section('layout_onecol', [], [
-            'baz' => new SectionComponent('baz', 'content', [
+            'baz' => SectionComponent::create('baz', 'content', [
               'id' => 'field_block:node:bundle_with_section_field:body',
               'context_mapping' => [
                 'entity' => 'layout_builder.entity',
@@ -114,7 +114,7 @@ public function providerTestLayoutSectionFormatter() {
       [
         [
           'section' => new Section('layout_onecol', [], [
-            'baz' => new SectionComponent('baz', 'content', [
+            'baz' => SectionComponent::create('baz', 'content', [
               'id' => 'system_powered_by_block',
             ]),
           ]),
@@ -130,18 +130,18 @@ public function providerTestLayoutSectionFormatter() {
       [
         [
           'section' => new Section('layout_onecol', [], [
-            'baz' => new SectionComponent('baz', 'content', [
+            'baz' => SectionComponent::create('baz', 'content', [
               'id' => 'system_powered_by_block',
             ]),
           ]),
         ],
         [
           'section' => new Section('layout_twocol', [], [
-            'foo' => new SectionComponent('foo', 'first', [
+            'foo' => SectionComponent::create('foo', 'first', [
               'id' => 'test_block_instantiation',
               'display_message' => 'foo text',
             ]),
-            'bar' => new SectionComponent('bar', 'second', [
+            'bar' => SectionComponent::create('bar', 'second', [
               'id' => 'test_block_instantiation',
               'display_message' => 'bar text',
             ]),
@@ -187,7 +187,7 @@ public function testLayoutSectionFormatterAccess() {
     $node = $this->createSectionNode([
       [
         'section' => new Section('layout_onecol', [], [
-          'baz' => new SectionComponent('baz', 'content', [
+          'baz' => SectionComponent::create('baz', 'content', [
             'id' => 'test_access',
           ]),
         ]),
diff --git a/core/modules/layout_builder/tests/src/Kernel/DefaultsSectionStorageTest.php b/core/modules/layout_builder/tests/src/Kernel/DefaultsSectionStorageTest.php
index bfa49065b569f0deca86764468e870bfcb15599e..63f08aab22679c72cda67de6c80f242f52585e7d 100644
--- a/core/modules/layout_builder/tests/src/Kernel/DefaultsSectionStorageTest.php
+++ b/core/modules/layout_builder/tests/src/Kernel/DefaultsSectionStorageTest.php
@@ -114,7 +114,7 @@ public function providerTestAccess() {
         'layout_onecol',
         [],
         [
-          'first-uuid' => new SectionComponent('first-uuid', 'content', ['id' => 'foo'], ['harold' => 'maude']),
+          'first-uuid' => SectionComponent::create('first-uuid', 'content', ['id' => 'foo'], ['layout_builder_defaults_test' => ['harold' => 'kumar']]),
         ],
         ['layout_builder_defaults_test' => ['which_party' => 'third']]
       ),
diff --git a/core/modules/layout_builder/tests/src/Kernel/OverridesSectionStorageTest.php b/core/modules/layout_builder/tests/src/Kernel/OverridesSectionStorageTest.php
index ef67ae87ac009b6ac43a596b211f8238808ccb39..73c71953c859865e20311aca5ce722fb3c46bebf 100644
--- a/core/modules/layout_builder/tests/src/Kernel/OverridesSectionStorageTest.php
+++ b/core/modules/layout_builder/tests/src/Kernel/OverridesSectionStorageTest.php
@@ -119,7 +119,7 @@ public function testAccess($expected, $is_enabled, array $section_data, array $p
   public function providerTestAccess() {
     $section_data = [
       new Section('layout_onecol', [], [
-        'first-uuid' => new SectionComponent('first-uuid', 'content', ['id' => 'foo']),
+        'first-uuid' => SectionComponent::create('first-uuid', 'content', ['id' => 'foo']),
       ]),
     ];

diff --git a/core/modules/layout_builder/tests/src/Kernel/SectionListTestBase.php b/core/modules/layout_builder/tests/src/Kernel/SectionListTestBase.php
index 1421375f220e6cf27764e49eb604b91904354884..aa1ce4a038ad5ccd57863c3fb3126e4c94133035 100644
--- a/core/modules/layout_builder/tests/src/Kernel/SectionListTestBase.php
+++ b/core/modules/layout_builder/tests/src/Kernel/SectionListTestBase.php
@@ -35,10 +35,10 @@ protected function setUp(): void {

     $section_data = [
       new Section('layout_test_plugin', [], [
-        'first-uuid' => new SectionComponent('first-uuid', 'content', ['id' => 'foo']),
+        'first-uuid' => SectionComponent::create('first-uuid', 'content', ['id' => 'foo']),
       ]),
       new Section('layout_test_plugin', ['setting_1' => 'bar'], [
-        'second-uuid' => new SectionComponent('second-uuid', 'content', ['id' => 'foo']),
+        'second-uuid' => SectionComponent::create('second-uuid', 'content', ['id' => 'foo']),
       ]),
     ];
     $this->sectionList = $this->getSectionList($section_data);
@@ -61,10 +61,10 @@ abstract protected function getSectionList(array $section_data);
   public function testGetSections() {
     $expected = [
       new Section('layout_test_plugin', ['setting_1' => 'Default'], [
-        'first-uuid' => new SectionComponent('first-uuid', 'content', ['id' => 'foo']),
+        'first-uuid' => SectionComponent::create('first-uuid', 'content', ['id' => 'foo']),
       ]),
       new Section('layout_test_plugin', ['setting_1' => 'bar'], [
-        'second-uuid' => new SectionComponent('second-uuid', 'content', ['id' => 'foo']),
+        'second-uuid' => SectionComponent::create('second-uuid', 'content', ['id' => 'foo']),
       ]),
     ];
     $this->assertSections($expected);
@@ -92,11 +92,11 @@ public function testGetSectionInvalidDelta() {
   public function testInsertSection() {
     $expected = [
       new Section('layout_test_plugin', ['setting_1' => 'Default'], [
-        'first-uuid' => new SectionComponent('first-uuid', 'content', ['id' => 'foo']),
+        'first-uuid' => SectionComponent::create('first-uuid', 'content', ['id' => 'foo']),
       ]),
       new Section('layout_onecol'),
       new Section('layout_test_plugin', ['setting_1' => 'bar'], [
-        'second-uuid' => new SectionComponent('second-uuid', 'content', ['id' => 'foo']),
+        'second-uuid' => SectionComponent::create('second-uuid', 'content', ['id' => 'foo']),
       ]),
     ];

@@ -110,10 +110,10 @@ public function testInsertSection() {
   public function testAppendSection() {
     $expected = [
       new Section('layout_test_plugin', ['setting_1' => 'Default'], [
-        'first-uuid' => new SectionComponent('first-uuid', 'content', ['id' => 'foo']),
+        'first-uuid' => SectionComponent::create('first-uuid', 'content', ['id' => 'foo']),
       ]),
       new Section('layout_test_plugin', ['setting_1' => 'bar'], [
-        'second-uuid' => new SectionComponent('second-uuid', 'content', ['id' => 'foo']),
+        'second-uuid' => SectionComponent::create('second-uuid', 'content', ['id' => 'foo']),
       ]),
       new Section('layout_onecol'),
     ];
@@ -154,7 +154,7 @@ public function providerTestRemoveAllSections() {
   public function testRemoveSection() {
     $expected = [
       new Section('layout_test_plugin', ['setting_1' => 'bar'], [
-        'second-uuid' => new SectionComponent('second-uuid', 'content', ['id' => 'foo']),
+        'second-uuid' => SectionComponent::create('second-uuid', 'content', ['id' => 'foo']),
       ]),
     ];

diff --git a/core/modules/layout_builder/tests/src/Kernel/TranslatableFieldTest.php b/core/modules/layout_builder/tests/src/Kernel/TranslatableFieldTest.php
index 68eb7cb61cc639093f24bebf6b25f08b633ff8ae..889559c1fa377eb855864f5f9cac939addacec78 100644
--- a/core/modules/layout_builder/tests/src/Kernel/TranslatableFieldTest.php
+++ b/core/modules/layout_builder/tests/src/Kernel/TranslatableFieldTest.php
@@ -67,7 +67,7 @@ protected function setUp(): void {
   public function testSectionsClearedOnCreateTranslation() {
     $section_data = [
       new Section('layout_onecol', [], [
-        'first-uuid' => new SectionComponent('first-uuid', 'content', ['id' => 'foo']),
+        'first-uuid' => SectionComponent::create('first-uuid', 'content', ['id' => 'foo']),
       ]),
     ];
     $entity = EntityTest::create([OverridesSectionStorage::FIELD_NAME => $section_data]);
diff --git a/core/modules/layout_builder/tests/src/Unit/BlockComponentRenderArrayTest.php b/core/modules/layout_builder/tests/src/Unit/BlockComponentRenderArrayTest.php
index 76281f8731615db0f3a396d3ec6acf5573e665ae..6808d2b2b2cc247b633966285b5ba9d9506e9d3f 100644
--- a/core/modules/layout_builder/tests/src/Unit/BlockComponentRenderArrayTest.php
+++ b/core/modules/layout_builder/tests/src/Unit/BlockComponentRenderArrayTest.php
@@ -106,7 +106,7 @@ public function testOnBuildRender($refinable_dependent_access) {
     $block->build()->willReturn($block_content);
     $this->blockManager->createInstance('some_block_id', ['id' => 'some_block_id'])->willReturn($block->reveal());

-    $component = new SectionComponent('some-uuid', 'some-region', ['id' => 'some_block_id']);
+    $component = SectionComponent::create('some-uuid', 'some-region', ['id' => 'some_block_id']);
     $in_preview = FALSE;
     $event = new SectionComponentBuildRenderArrayEvent($component, $contexts, $in_preview);

@@ -176,7 +176,7 @@ public function testOnBuildRenderWithoutPreviewFallbackString($refinable_depende
     $block->build()->willReturn($block_content);
     $this->blockManager->createInstance('some_block_id', ['id' => 'some_block_id'])->willReturn($block->reveal());

-    $component = new SectionComponent('some-uuid', 'some-region', ['id' => 'some_block_id']);
+    $component = SectionComponent::create('some-uuid', 'some-region', ['id' => 'some_block_id']);
     $in_preview = FALSE;
     $event = new SectionComponentBuildRenderArrayEvent($component, $contexts, $in_preview);

@@ -248,7 +248,7 @@ public function testOnBuildRenderDenied($refinable_dependent_access) {
     $block->build()->willReturn($block_content);
     $this->blockManager->createInstance('some_block_id', ['id' => 'some_block_id'])->willReturn($block->reveal());

-    $component = new SectionComponent('some-uuid', 'some-region', ['id' => 'some_block_id']);
+    $component = SectionComponent::create('some-uuid', 'some-region', ['id' => 'some_block_id']);
     $in_preview = FALSE;
     $event = new SectionComponentBuildRenderArrayEvent($component, $contexts, $in_preview);

@@ -307,7 +307,7 @@ public function testOnBuildRenderInPreview($refinable_dependent_access) {
     $block->build()->willReturn($block_content);
     $this->blockManager->createInstance('some_block_id', ['id' => 'some_block_id'])->willReturn($block->reveal());

-    $component = new SectionComponent('some-uuid', 'some-region', ['id' => 'some_block_id']);
+    $component = SectionComponent::create('some-uuid', 'some-region', ['id' => 'some_block_id']);
     $in_preview = TRUE;
     $event = new SectionComponentBuildRenderArrayEvent($component, $contexts, $in_preview);

@@ -363,7 +363,7 @@ public function testOnBuildRenderInPreviewEmptyBuild() {
     $block->build()->willReturn($block_content);
     $this->blockManager->createInstance('some_block_id', ['id' => 'some_block_id'])->willReturn($block->reveal());

-    $component = new SectionComponent('some-uuid', 'some-region', ['id' => 'some_block_id']);
+    $component = SectionComponent::create('some-uuid', 'some-region', ['id' => 'some_block_id']);
     $event = new SectionComponentBuildRenderArrayEvent($component, [], TRUE);

     $subscriber = new BlockComponentRenderArray($this->account->reveal());
@@ -421,7 +421,7 @@ public function testOnBuildRenderEmptyBuild() {
     ]);
     $this->blockManager->createInstance('some_block_id', ['id' => 'some_block_id'])->willReturn($block->reveal());

-    $component = new SectionComponent('some-uuid', 'some-region', ['id' => 'some_block_id']);
+    $component = SectionComponent::create('some-uuid', 'some-region', ['id' => 'some_block_id']);
     $event = new SectionComponentBuildRenderArrayEvent($component, [], FALSE);

     $subscriber = new BlockComponentRenderArray($this->account->reveal());
@@ -469,7 +469,7 @@ public function testOnBuildRenderEmptyBuildWithCacheTags() {
     $block->build()->willReturn($block_content);
     $this->blockManager->createInstance('some_block_id', ['id' => 'some_block_id'])->willReturn($block->reveal());

-    $component = new SectionComponent('some-uuid', 'some-region', ['id' => 'some_block_id']);
+    $component = SectionComponent::create('some-uuid', 'some-region', ['id' => 'some_block_id']);
     $event = new SectionComponentBuildRenderArrayEvent($component, [], FALSE);

     $subscriber = new BlockComponentRenderArray($this->account->reveal());
@@ -497,7 +497,7 @@ public function testOnBuildRenderEmptyBuildWithCacheTags() {
   public function testOnBuildRenderNoBlock() {
     $this->blockManager->createInstance('some_block_id', ['id' => 'some_block_id'])->willReturn(NULL);

-    $component = new SectionComponent('some-uuid', 'some-region', ['id' => 'some_block_id']);
+    $component = SectionComponent::create('some-uuid', 'some-region', ['id' => 'some_block_id']);
     $contexts = [];
     $in_preview = FALSE;
     $event = new SectionComponentBuildRenderArrayEvent($component, $contexts, $in_preview);
diff --git a/core/modules/layout_builder/tests/src/Unit/SectionComponentTest.php b/core/modules/layout_builder/tests/src/Unit/SectionComponentTest.php
index e50fe65e3586f4f95fa4f980ddf6c2c92f6b6520..7fb052c75e769af4a51d20592dc26fe96c2936f5 100644
--- a/core/modules/layout_builder/tests/src/Unit/SectionComponentTest.php
+++ b/core/modules/layout_builder/tests/src/Unit/SectionComponentTest.php
@@ -9,6 +9,7 @@
 use Drupal\Core\Layout\LayoutPluginManagerInterface;
 use Drupal\layout_builder\Event\SectionComponentBuildRenderArrayEvent;
 use Drupal\layout_builder\LayoutBuilderEvents;
+use Drupal\layout_builder\Section;
 use Drupal\layout_builder\SectionComponent;
 use Drupal\Tests\UnitTestCase;
 use Prophecy\Argument;
@@ -20,6 +21,37 @@
  */
 class SectionComponentTest extends UnitTestCase {

+  /**
+   * The section object to test.
+   *
+   * @var \Drupal\layout_builder\Section
+   */
+  protected $section;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+
+    $component = SectionComponent::create(
+      'some-uuid',
+      'some-region',
+      ['id' => 'existing-block-id'],
+      [
+        'Initech' => [
+          'Bill Lumbergh' => 'TPS reports',
+          'Milton Waddams' => 'Red Stapler',
+        ],
+        'Chotchkies' => [
+          'flair' => TRUE,
+        ],
+      ]
+    );
+
+    $this->section = new Section('layout_onecol', [], [$component]);
+  }
+
   /**
    * @covers ::toRenderArray
    */
@@ -63,9 +95,223 @@ public function testToRenderArray() {
       '#markup' => 'block_plugin_id',
     ];

-    $component = new SectionComponent('some-uuid', 'some-region', ['id' => 'some_block_id']);
+    $component = SectionComponent::create('some-uuid', 'some-region', ['id' => 'some_block_id']);
     $result = $component->toRenderArray();
     $this->assertEquals($expected, $result);
   }

+  /**
+   * @covers ::getThirdPartySettings
+   * @dataProvider providerTestGetThirdPartySettings
+   */
+  public function testGetThirdPartySettings($provider, $expected) {
+    $this->assertSame($expected, $this->section->getComponent('some-uuid')->getThirdPartySettings($provider));
+  }
+
+  /**
+   * Provides test data for ::testGetThirdPartySettings().
+   */
+  public function providerTestGetThirdPartySettings() {
+    $data = [];
+    $data['Initech third party settings'] = [
+      'Initech',
+      [
+        'Bill Lumbergh' => 'TPS reports',
+        'Milton Waddams' => 'Red Stapler',
+      ],
+    ];
+    $data['Chotchkies third party settings'] = [
+      'Chotchkies',
+      ['flair' => TRUE],
+    ];
+    $data['Nonexisting provider'] = [
+      'non_existing_provider',
+      [],
+    ];
+    return $data;
+  }
+
+  /**
+   * @covers ::getThirdPartySetting
+   * @dataProvider providerTestGetThirdPartySetting
+   */
+  public function testGetThirdPartySetting($provider, $key, $expected, $default = FALSE) {
+    if ($default) {
+      $this->assertSame($expected, $this->section->getComponent('some-uuid')->getThirdPartySetting($provider, $key, $default));
+    }
+    else {
+      $this->assertSame($expected, $this->section->getComponent('some-uuid')->getThirdPartySetting($provider, $key));
+    }
+  }
+
+  /**
+   * Provides test data for ::testGetThirdPartySetting().
+   */
+  public function providerTestGetThirdPartySetting() {
+    $data = [];
+    $data['Initech third party setting for "Bill Lumbergh" key'] = [
+      'Initech',
+      'Bill Lumbergh',
+      'TPS reports',
+    ];
+    $data['Chotchkies third party setting for "flair" key'] = [
+      'Chotchkies',
+      'flair',
+      TRUE,
+    ];
+    $data['Chotchkies third party setting for nonexisting key'] = [
+      'Chotchkies',
+      'non_existing_key',
+      NULL,
+    ];
+    $data['Nonexisting provider third party setting for nonexisting key'] = [
+      'non_existing_provider',
+      'non_existing_key',
+      NULL,
+    ];
+    $data['Nonexisting provider third party setting for nonexisting key with a default value provided'] = [
+      'non_existing_provider',
+      'non_existing_key',
+      'default value',
+      'default value',
+    ];
+    return $data;
+  }
+
+  /**
+   * @covers ::setThirdPartySetting
+   * @dataProvider providerTestSetThirdPartySetting
+   */
+  public function testSetThirdPartySetting($provider, $key, $value, $expected) {
+    $this->section->getComponent('some-uuid')->setThirdPartySetting($provider, $key, $value);
+    $this->assertSame($expected, $this->section->getComponent('some-uuid')->getThirdPartySettings($provider));
+  }
+
+  /**
+   * Provides test data for ::testSetThirdPartySettings().
+   */
+  public function providerTestSetThirdPartySetting() {
+    $data = [];
+    $data['Override "Milton Waddams" third party setting for Initech provider'] = [
+      'Initech',
+      'Milton Waddams',
+      'Storage B',
+      [
+        'Bill Lumbergh' => 'TPS reports',
+        'Milton Waddams' => 'Storage B',
+      ],
+    ];
+    $data['Add "Peter Gibbons" third party setting for Initech provider'] = [
+      'Initech',
+      'Peter Gibbons',
+      'Programmer',
+      [
+        'Bill Lumbergh' => 'TPS reports',
+        'Milton Waddams' => 'Red Stapler',
+        'Peter Gibbons' => 'Programmer',
+      ],
+    ];
+    $data['Add "Medical Providers" provider third party settings'] = [
+      'Medical Providers',
+      'Dr. Swanson',
+      'Hypnotist',
+      [
+        'Dr. Swanson' => 'Hypnotist',
+      ],
+    ];
+    return $data;
+  }
+
+  /**
+   * @covers ::unsetThirdPartySetting
+   * @dataProvider providerTestUnsetThirdPartySetting
+   */
+  public function testUnsetThirdPartySetting($provider, $key, $expected) {
+    $this->section->getComponent('some-uuid')->unsetThirdPartySetting($provider, $key);
+    $this->assertSame($expected, $this->section->getComponent('some-uuid')->getThirdPartySettings($provider));
+  }
+
+  /**
+   * Provides test data for ::testUnsetThirdPartySetting().
+   */
+  public function providerTestUnsetThirdPartySetting() {
+    $data = [];
+    $data['Key with values'] = [
+      'Initech',
+      'Bill Lumbergh',
+      [
+        'Milton Waddams' => 'Red Stapler',
+      ],
+    ];
+    $data['Key without values'] = [
+      'Chotchkies',
+      'flair',
+      [],
+    ];
+    $data['Non-existing key'] = [
+      'Chotchkies',
+      'non_existing_key',
+      [
+        'flair' => TRUE,
+      ],
+    ];
+    $data['Non-existing provider'] = [
+      'non_existing_provider',
+      'non_existing_key',
+      [],
+    ];
+    return $data;
+  }
+
+  /**
+   * @covers ::getThirdPartyProviders
+   */
+  public function testGetThirdPartyProviders() {
+    $this->assertSame(['Initech', 'Chotchkies'], $this->section->getComponent('some-uuid')->getThirdPartyProviders());
+    $this->section->getComponent('some-uuid')->unsetThirdPartySetting('Chotchkies', 'flair');
+    $this->assertSame(['Initech'], $this->section->getComponent('some-uuid')->getThirdPartyProviders());
+  }
+
+  /**
+   * Tests that deprecation notices are triggered.
+   *
+   * @group legacy
+   *
+   * @todo Remove below test when the drupal:10.0.x branch is opened.
+   * @see https://www.drupal.org/project/drupal/issues/3160644
+   */
+  public function testDeprecationNotices() {
+    $this->expectDeprecation('Setting additional properties is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Additional component properties should be set via ::setThirdPartySetting(). See https://www.drupal.org/node/3100177');
+    $this->expectDeprecation('Instantiating a SectionComponent object directly is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. SectionComponents should be instantiated using the SectionComponent::create() method instead. See https://www.drupal.org/node/3100177');
+    $this->expectDeprecation('Setting additional properties is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Additional component properties should be set via ::setThirdPartySetting(). See https://www.drupal.org/node/3100177');
+    $this->expectDeprecation('Getting additional properties is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Additional component properties should be gotten via ::setThirdPartySetting(). See https://www.drupal.org/node/3100177');
+
+    // Instantiate SectionComponent object directly, which is deprecated.
+    new SectionComponent(
+      'some-uuid',
+      'some-region',
+      [],
+      // Provide deprecated 'additional' argument.
+      [
+        'spoiler-alert' => [
+          'glitch-in-accounting' => 'fixed',
+          'building-arson' => 'probably',
+          'milton-on-beach' => TRUE,
+        ],
+      ],
+      [],
+    );
+
+    // Instantiate SectionComponent object with preferred create() method.
+    $component = SectionComponent::create(
+      'some-uuid',
+      'some-region',
+      [],
+      [],
+    );
+    // Call deprecated set() and get() methods.
+    $component->set('music', 'very 90s');
+    $component->get('music');
+  }
+
 }
diff --git a/core/modules/layout_builder/tests/src/Unit/SectionRenderTest.php b/core/modules/layout_builder/tests/src/Unit/SectionRenderTest.php
index fe9fbdc35c2164a53b672b0df872641adc85d411..b62ba63cba06af0d54bdb71691b608eac10bd5bc 100644
--- a/core/modules/layout_builder/tests/src/Unit/SectionRenderTest.php
+++ b/core/modules/layout_builder/tests/src/Unit/SectionRenderTest.php
@@ -133,7 +133,7 @@ public function testToRenderArray() {
     $block->getPreviewFallbackString()->willReturn($placeholder_label);

     $section = [
-      new SectionComponent('some_uuid', 'content', ['id' => 'block_plugin_id']),
+      SectionComponent::create('some_uuid', 'content', ['id' => 'block_plugin_id']),
     ];
     $expected = [
       'content' => [
@@ -159,7 +159,7 @@ public function testToRenderArrayAccessDenied() {
     $block->getCacheMaxAge()->willReturn(Cache::PERMANENT);

     $section = [
-      new SectionComponent('some_uuid', 'content', ['id' => 'block_plugin_id']),
+      SectionComponent::create('some_uuid', 'content', ['id' => 'block_plugin_id']),
     ];
     $expected = [
       'content' => [
@@ -214,7 +214,7 @@ public function testToRenderArrayPreview() {
     $block->getPreviewFallbackString()->willReturn($placeholder_label);

     $section = [
-      new SectionComponent('some_uuid', 'content', ['id' => 'block_plugin_id']),
+      SectionComponent::create('some_uuid', 'content', ['id' => 'block_plugin_id']),
     ];
     $expected = [
       'content' => [
@@ -275,7 +275,7 @@ public function testContextAwareBlock() {
     $block->getPreviewFallbackString()->willReturn($placeholder_label);

     $section = [
-      new SectionComponent('some_uuid', 'content', ['id' => 'block_plugin_id']),
+      SectionComponent::create('some_uuid', 'content', ['id' => 'block_plugin_id']),
     ];
     $expected = [
       'content' => [
@@ -292,7 +292,7 @@ public function testContextAwareBlock() {
   public function testToRenderArrayMissingPluginId() {
     $this->expectException(PluginException::class);
     $this->expectExceptionMessage('No plugin ID specified for component with "some_uuid" UUID');
-    (new Section('layout_onecol', [], [new SectionComponent('some_uuid', 'content')]))->toRenderArray();
+    (new Section('layout_onecol', [], [SectionComponent::create('some_uuid', 'content')]))->toRenderArray();
   }

 }
diff --git a/core/modules/layout_builder/tests/src/Unit/SectionTest.php b/core/modules/layout_builder/tests/src/Unit/SectionTest.php
index 7e3c5b130280915e5300dcdef765cf3f782417c5..08c1ea0aee86614f49bce2fa51012f2a3eca8f94 100644
--- a/core/modules/layout_builder/tests/src/Unit/SectionTest.php
+++ b/core/modules/layout_builder/tests/src/Unit/SectionTest.php
@@ -33,9 +33,9 @@ protected function setUp(): void {
       'layout_onecol',
       [],
       [
-        new SectionComponent('existing-uuid', 'some-region', ['id' => 'existing-block-id']),
-        (new SectionComponent('second-uuid', 'ordered-region', ['id' => 'second-block-id']))->setWeight(3),
-        (new SectionComponent('first-uuid', 'ordered-region', ['id' => 'first-block-id']))->setWeight(2),
+        SectionComponent::create('existing-uuid', 'some-region', ['id' => 'existing-block-id']),
+        SectionComponent::create('second-uuid', 'ordered-region', ['id' => 'second-block-id'])->setWeight(3),
+        SectionComponent::create('first-uuid', 'ordered-region', ['id' => 'first-block-id'])->setWeight(2),
       ],
       [
         'bad_judgement' => ['blink_speed' => 'fast', 'spin_direction' => 'clockwise'],
@@ -51,9 +51,9 @@ protected function setUp(): void {
    */
   public function testGetComponents() {
     $expected = [
-      'existing-uuid' => (new SectionComponent('existing-uuid', 'some-region', ['id' => 'existing-block-id']))->setWeight(0),
-      'second-uuid' => (new SectionComponent('second-uuid', 'ordered-region', ['id' => 'second-block-id']))->setWeight(3),
-      'first-uuid' => (new SectionComponent('first-uuid', 'ordered-region', ['id' => 'first-block-id']))->setWeight(2),
+      'existing-uuid' => SectionComponent::create('existing-uuid', 'some-region', ['id' => 'existing-block-id'])->setWeight(0),
+      'second-uuid' => SectionComponent::create('second-uuid', 'ordered-region', ['id' => 'second-block-id'])->setWeight(3),
+      'first-uuid' => SectionComponent::create('first-uuid', 'ordered-region', ['id' => 'first-block-id'])->setWeight(2),
     ];

     $this->assertComponents($expected, $this->section);
@@ -72,7 +72,7 @@ public function testGetComponentInvalidUuid() {
    * @covers ::getComponent
    */
   public function testGetComponent() {
-    $expected = new SectionComponent('existing-uuid', 'some-region', ['id' => 'existing-block-id']);
+    $expected = SectionComponent::create('existing-uuid', 'some-region', ['id' => 'existing-block-id']);

     $this->assertEquals($expected, $this->section->getComponent('existing-uuid'));
   }
@@ -83,8 +83,8 @@ public function testGetComponent() {
    */
   public function testRemoveComponent() {
     $expected = [
-      'existing-uuid' => (new SectionComponent('existing-uuid', 'some-region', ['id' => 'existing-block-id']))->setWeight(0),
-      'second-uuid' => (new SectionComponent('second-uuid', 'ordered-region', ['id' => 'second-block-id']))->setWeight(3),
+      'existing-uuid' => SectionComponent::create('existing-uuid', 'some-region', ['id' => 'existing-block-id'])->setWeight(0),
+      'second-uuid' => SectionComponent::create('second-uuid', 'ordered-region', ['id' => 'second-block-id'])->setWeight(3),
     ];

     $this->section->removeComponent('first-uuid');
@@ -98,13 +98,13 @@ public function testRemoveComponent() {
    */
   public function testAppendComponent() {
     $expected = [
-      'existing-uuid' => (new SectionComponent('existing-uuid', 'some-region', ['id' => 'existing-block-id']))->setWeight(0),
-      'second-uuid' => (new SectionComponent('second-uuid', 'ordered-region', ['id' => 'second-block-id']))->setWeight(3),
-      'first-uuid' => (new SectionComponent('first-uuid', 'ordered-region', ['id' => 'first-block-id']))->setWeight(2),
-      'new-uuid' => (new SectionComponent('new-uuid', 'some-region', []))->setWeight(1),
+      'existing-uuid' => SectionComponent::create('existing-uuid', 'some-region', ['id' => 'existing-block-id'])->setWeight(0),
+      'second-uuid' => SectionComponent::create('second-uuid', 'ordered-region', ['id' => 'second-block-id'])->setWeight(3),
+      'first-uuid' => SectionComponent::create('first-uuid', 'ordered-region', ['id' => 'first-block-id'])->setWeight(2),
+      'new-uuid' => SectionComponent::create('new-uuid', 'some-region', [])->setWeight(1),
     ];

-    $this->section->appendComponent(new SectionComponent('new-uuid', 'some-region'));
+    $this->section->appendComponent(SectionComponent::create('new-uuid', 'some-region'));
     $this->assertComponents($expected, $this->section);
   }

@@ -113,13 +113,13 @@ public function testAppendComponent() {
    */
   public function testInsertAfterComponent() {
     $expected = [
-      'existing-uuid' => (new SectionComponent('existing-uuid', 'some-region', ['id' => 'existing-block-id']))->setWeight(0),
-      'second-uuid' => (new SectionComponent('second-uuid', 'ordered-region', ['id' => 'second-block-id']))->setWeight(4),
-      'first-uuid' => (new SectionComponent('first-uuid', 'ordered-region', ['id' => 'first-block-id']))->setWeight(2),
-      'new-uuid' => (new SectionComponent('new-uuid', 'ordered-region', []))->setWeight(3),
+      'existing-uuid' => SectionComponent::create('existing-uuid', 'some-region', ['id' => 'existing-block-id'])->setWeight(0),
+      'second-uuid' => SectionComponent::create('second-uuid', 'ordered-region', ['id' => 'second-block-id'])->setWeight(4),
+      'first-uuid' => SectionComponent::create('first-uuid', 'ordered-region', ['id' => 'first-block-id'])->setWeight(2),
+      'new-uuid' => SectionComponent::create('new-uuid', 'ordered-region', [])->setWeight(3),
     ];

-    $this->section->insertAfterComponent('first-uuid', new SectionComponent('new-uuid', 'ordered-region'));
+    $this->section->insertAfterComponent('first-uuid', SectionComponent::create('new-uuid', 'ordered-region'));
     $this->assertComponents($expected, $this->section);
   }

@@ -129,7 +129,7 @@ public function testInsertAfterComponent() {
   public function testInsertAfterComponentValidUuidRegionMismatch() {
     $this->expectException(\InvalidArgumentException::class);
     $this->expectExceptionMessage('Invalid preceding UUID "existing-uuid"');
-    $this->section->insertAfterComponent('existing-uuid', new SectionComponent('new-uuid', 'ordered-region'));
+    $this->section->insertAfterComponent('existing-uuid', SectionComponent::create('new-uuid', 'ordered-region'));
   }

   /**
@@ -138,7 +138,7 @@ public function testInsertAfterComponentValidUuidRegionMismatch() {
   public function testInsertAfterComponentInvalidUuid() {
     $this->expectException(\InvalidArgumentException::class);
     $this->expectExceptionMessage('Invalid preceding UUID "invalid-uuid"');
-    $this->section->insertAfterComponent('invalid-uuid', new SectionComponent('new-uuid', 'ordered-region'));
+    $this->section->insertAfterComponent('invalid-uuid', SectionComponent::create('new-uuid', 'ordered-region'));
   }

   /**
@@ -147,13 +147,13 @@ public function testInsertAfterComponentInvalidUuid() {
    */
   public function testInsertComponent() {
     $expected = [
-      'existing-uuid' => (new SectionComponent('existing-uuid', 'some-region', ['id' => 'existing-block-id']))->setWeight(0),
-      'second-uuid' => (new SectionComponent('second-uuid', 'ordered-region', ['id' => 'second-block-id']))->setWeight(4),
-      'first-uuid' => (new SectionComponent('first-uuid', 'ordered-region', ['id' => 'first-block-id']))->setWeight(3),
-      'new-uuid' => (new SectionComponent('new-uuid', 'ordered-region', []))->setWeight(2),
+      'existing-uuid' => SectionComponent::create('existing-uuid', 'some-region', ['id' => 'existing-block-id'])->setWeight(0),
+      'second-uuid' => SectionComponent::create('second-uuid', 'ordered-region', ['id' => 'second-block-id'])->setWeight(4),
+      'first-uuid' => SectionComponent::create('first-uuid', 'ordered-region', ['id' => 'first-block-id'])->setWeight(3),
+      'new-uuid' => SectionComponent::create('new-uuid', 'ordered-region', [])->setWeight(2),
     ];

-    $this->section->insertComponent(0, new SectionComponent('new-uuid', 'ordered-region'));
+    $this->section->insertComponent(0, SectionComponent::create('new-uuid', 'ordered-region'));
     $this->assertComponents($expected, $this->section);
   }

@@ -162,13 +162,13 @@ public function testInsertComponent() {
    */
   public function testInsertComponentAppend() {
     $expected = [
-      'existing-uuid' => (new SectionComponent('existing-uuid', 'some-region', ['id' => 'existing-block-id']))->setWeight(0),
-      'second-uuid' => (new SectionComponent('second-uuid', 'ordered-region', ['id' => 'second-block-id']))->setWeight(3),
-      'first-uuid' => (new SectionComponent('first-uuid', 'ordered-region', ['id' => 'first-block-id']))->setWeight(2),
-      'new-uuid' => (new SectionComponent('new-uuid', 'ordered-region', []))->setWeight(4),
+      'existing-uuid' => SectionComponent::create('existing-uuid', 'some-region', ['id' => 'existing-block-id'])->setWeight(0),
+      'second-uuid' => SectionComponent::create('second-uuid', 'ordered-region', ['id' => 'second-block-id'])->setWeight(3),
+      'first-uuid' => SectionComponent::create('first-uuid', 'ordered-region', ['id' => 'first-block-id'])->setWeight(2),
+      'new-uuid' => SectionComponent::create('new-uuid', 'ordered-region', [])->setWeight(4),
     ];

-    $this->section->insertComponent(2, new SectionComponent('new-uuid', 'ordered-region'));
+    $this->section->insertComponent(2, SectionComponent::create('new-uuid', 'ordered-region'));
     $this->assertComponents($expected, $this->section);
   }

@@ -178,7 +178,7 @@ public function testInsertComponentAppend() {
   public function testInsertComponentInvalidDelta() {
     $this->expectException(\OutOfBoundsException::class);
     $this->expectExceptionMessage('Invalid delta "7" for the "new-uuid" component');
-    $this->section->insertComponent(7, new SectionComponent('new-uuid', 'ordered-region'));
+    $this->section->insertComponent(7, SectionComponent::create('new-uuid', 'ordered-region'));
   }

   /**
diff --git a/core/profiles/demo_umami/config/install/core.entity_view_display.node.article.full.yml b/core/profiles/demo_umami/config/install/core.entity_view_display.node.article.full.yml
index ab8d49faceb15621720925c5f75eca41c6473fea..49fde4f2b33fbc74db802acdaf92605c6af77d08 100644
--- a/core/profiles/demo_umami/config/install/core.entity_view_display.node.article.full.yml
+++ b/core/profiles/demo_umami/config/install/core.entity_view_display.node.article.full.yml
@@ -39,6 +39,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
           02d32417-145b-41a4-8d7a-27e4477b9666:
             uuid: 02d32417-145b-41a4-8d7a-27e4477b9666
             region: content
@@ -56,6 +57,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 1
             additional: {  }
+            third_party_settings: {  }
           f73af85e-15fc-4672-8b72-3ed91353e08c:
             uuid: f73af85e-15fc-4672-8b72-3ed91353e08c
             region: content
@@ -71,6 +73,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 2
             additional: {  }
+            third_party_settings: {  }
           957850fc-d5ea-4a6f-b3c9-dd2e4811a5c4:
             uuid: 957850fc-d5ea-4a6f-b3c9-dd2e4811a5c4
             region: content
@@ -81,6 +84,7 @@ third_party_settings:
                 entity: layout_builder.entity
             weight: 3
             additional: {  }
+            third_party_settings: {  }
           937c9738-b63e-409f-897a-c9fc98f6716e:
             uuid: 937c9738-b63e-409f-897a-c9fc98f6716e
             region: content
@@ -91,6 +95,7 @@ third_party_settings:
                 entity: layout_builder.entity
             weight: 4
             additional: {  }
+            third_party_settings: {  }
         third_party_settings: {  }
 id: node.article.full
 targetEntityType: node
diff --git a/core/profiles/demo_umami/config/install/core.entity_view_display.node.page.full.yml b/core/profiles/demo_umami/config/install/core.entity_view_display.node.page.full.yml
index a1f918afdac083a1099120ca98e4991c727094ba..d4444009fb51d795b13241f28cc35da10794097b 100644
--- a/core/profiles/demo_umami/config/install/core.entity_view_display.node.page.full.yml
+++ b/core/profiles/demo_umami/config/install/core.entity_view_display.node.page.full.yml
@@ -36,6 +36,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
           57ad7b26-a88b-439e-a056-40f2de29a943:
             uuid: 57ad7b26-a88b-439e-a056-40f2de29a943
             region: content
@@ -46,6 +47,7 @@ third_party_settings:
                 entity: layout_builder.entity
             weight: 1
             additional: {  }
+            third_party_settings: {  }
           01b94e28-e38c-4849-98d6-ed77bca30afc:
             uuid: 01b94e28-e38c-4849-98d6-ed77bca30afc
             region: content
@@ -56,6 +58,7 @@ third_party_settings:
                 entity: layout_builder.entity
             weight: 2
             additional: {  }
+            third_party_settings: {  }
         third_party_settings: {  }
 id: node.page.full
 targetEntityType: node
diff --git a/core/profiles/demo_umami/config/install/core.entity_view_display.node.recipe.full.yml b/core/profiles/demo_umami/config/install/core.entity_view_display.node.recipe.full.yml
index a8dcbb80a2677e0477e17e24726e872f648e5ef5..eb0e8a49be6c0634a354425239c4193e28bc5518 100644
--- a/core/profiles/demo_umami/config/install/core.entity_view_display.node.recipe.full.yml
+++ b/core/profiles/demo_umami/config/install/core.entity_view_display.node.recipe.full.yml
@@ -49,6 +49,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 3
             additional: {  }
+            third_party_settings: {  }
           0eff9e1d-4e73-4748-b910-e5568df1d5aa:
             uuid: 0eff9e1d-4e73-4748-b910-e5568df1d5aa
             region: content
@@ -65,6 +66,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 2
             additional: {  }
+            third_party_settings: {  }
           44801518-fe93-421a-bdcb-550493c7925d:
             uuid: 44801518-fe93-421a-bdcb-550493c7925d
             region: content
@@ -80,6 +82,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 4
             additional: {  }
+            third_party_settings: {  }
         third_party_settings: {  }
       -
         layout_id: layout_oneplusfourgrid_section
@@ -105,6 +108,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 4
             additional: {  }
+            third_party_settings: {  }
           df8bfafc-210c-4d86-9745-e47081ab0fd4:
             uuid: df8bfafc-210c-4d86-9745-e47081ab0fd4
             region: fifth
@@ -120,6 +124,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
           a2d450d0-08ce-4123-bca0-411bfa1da132:
             uuid: a2d450d0-08ce-4123-bca0-411bfa1da132
             region: fourth
@@ -137,6 +142,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
           f91febc6-d924-47a2-8ffd-b71d3b2597c7:
             uuid: f91febc6-d924-47a2-8ffd-b71d3b2597c7
             region: third
@@ -154,6 +160,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
           00488840-db50-4afe-9c30-a123e6707fa9:
             uuid: 00488840-db50-4afe-9c30-a123e6707fa9
             region: second
@@ -171,6 +178,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
           69d8bce1-28ae-4287-a05b-a2166679f867:
             uuid: 69d8bce1-28ae-4287-a05b-a2166679f867
             region: first
@@ -190,6 +198,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
         third_party_settings: {  }
       -
         layout_id: layout_twocol_section
@@ -213,6 +222,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
           f61cae40-5865-4c4c-98fa-14b8234e7b98:
             uuid: f61cae40-5865-4c4c-98fa-14b8234e7b98
             region: second
@@ -228,6 +238,7 @@ third_party_settings:
                 third_party_settings: {  }
             weight: 0
             additional: {  }
+            third_party_settings: {  }
         third_party_settings: {  }
       -
         layout_id: layout_onecol
@@ -244,6 +255,7 @@ third_party_settings:
                 entity: layout_builder.entity
             weight: 0
             additional: {  }
+            third_party_settings: {  }
         third_party_settings: {  }
 id: node.recipe.full
 targetEntityType: node