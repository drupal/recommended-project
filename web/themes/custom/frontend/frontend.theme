<?php

/**
 * @file
 * frontend.theme
 */

use Drupal\Core\Serialization\Yaml;
use Drupal\Component\Serialization\Exception\InvalidDataTypeException;
use Drupal\Core\Asset\Exception\InvalidLibraryFileException;

/**
 * Implements hook_library_info_alter().
 */
function frontend_library_info_alter(&$libraries, $extension) {
  $theme_name = basename(__FILE__, '.theme');
  $theme_path = \Drupal::service('extension.list.theme')->getPath($theme_name);

  if ($extension == $theme_name) {
    $directory_iterator = new RecursiveDirectoryIterator($theme_path . '/dev/components/');

    foreach (new RecursiveIteratorIterator($directory_iterator) as $file) {
      if ($file->getFilename() == 'libraries.yml') {
        try {
          $componentPathFromRoot = substr($file->getPathName(), 0, -13);
          $componentPathFromTheme = str_replace($theme_path . '/', '', $componentPathFromRoot);
          $new_libraries = Yaml::decode(file_get_contents($file->getRealPath()));

          foreach ($new_libraries as $key => $new_library) {
            if (isset($libraries[$key])) {
              \Drupal::messenger()
                ->addWarning(t('The library @key from the theme @themename has multiple definitions.', [
                  '@key' => $key,
                  '@themename' => $theme_name,
                ]));
            }
            else {
              if (isset($new_library['css'])) {
                foreach ($new_library['css'] as $group_key => $css_grouped) {
                  foreach ($css_grouped as $file_key => $css_file) {
                    if (substr($file_key, 0, 14) == 'css/components') {
                      // Path is absolutely defined
                      // (deprecated, but as default assumed by Drupal)
                      // $new_library['css'][$group_key][$file_key] = $css_file.
                    }
                    else {
                      if (isset($css_file['type'])) {
                        if ($css_file['type'] == 'external') {
                          continue;
                        }
                      }

                      // Path is relatively defined.
                      $new_library['css'][$group_key][$componentPathFromTheme . $file_key] = $css_file;
                      unset($new_library['css'][$group_key][$file_key]);
                    }
                  }
                }
              }

              if (isset($new_library['js'])) {
                foreach ($new_library['js'] as $file_key => $js_file) {
                  if (substr($file_key, 0, 13) == 'js/components') {
                    // Path is absolutely defined
                    // (deprecated, but as default assumed by Drupal).
                  }
                  else {
                    if (isset($js_file['type'])) {
                      if ($js_file['type'] == 'external') {
                        continue;
                      }
                    }

                    // Path is relatively defined.
                    $new_library['js'][$componentPathFromTheme . $file_key] = $js_file;
                    unset($new_library['js'][$file_key]);
                  }
                }
              }

              $libraries[$key] = $new_library;
            }
          }
        }
        catch (InvalidDataTypeException $e) {
          // Rethrow a more helpful exception to provide context.
          throw new InvalidLibraryFileException(sprintf('Invalid library definition in %s: %s', $file->getRealPath(), $e->getMessage()), 0, $e);
        }
      }
    }
  }
}
